package smartwake.domain;

import static org.assertj.core.api.Assertions.assertThat;
import static smartwake.domain.AssertUtils.zonedDataTimeSameInstant;

public class AlarmAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlarmAllPropertiesEquals(Alarm expected, Alarm actual) {
        assertAlarmAutoGeneratedPropertiesEquals(expected, actual);
        assertAlarmAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlarmAllUpdatablePropertiesEquals(Alarm expected, Alarm actual) {
        assertAlarmUpdatableFieldsEquals(expected, actual);
        assertAlarmUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlarmAutoGeneratedPropertiesEquals(Alarm expected, Alarm actual) {
        assertThat(expected)
            .as("Verify Alarm auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlarmUpdatableFieldsEquals(Alarm expected, Alarm actual) {
        assertThat(expected)
            .as("Verify Alarm relevant properties")
            .satisfies(e -> assertThat(e.getTime()).as("check time").usingComparator(zonedDataTimeSameInstant).isEqualTo(actual.getTime()))
            .satisfies(
                e ->
                    assertThat(e.getAlarmTime())
                        .as("check alarmTime")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getAlarmTime())
            )
            .satisfies(e -> assertThat(e.getEnabled()).as("check enabled").isEqualTo(actual.getEnabled()))
            .satisfies(e -> assertThat(e.getSound()).as("check sound").isEqualTo(actual.getSound()))
            .satisfies(e -> assertThat(e.getLabel()).as("check label").isEqualTo(actual.getLabel()))
            .satisfies(e -> assertThat(e.getRepeatDays()).as("check repeatDays").isEqualTo(actual.getRepeatDays()))
            .satisfies(e -> assertThat(e.getSnoozeEnabled()).as("check snoozeEnabled").isEqualTo(actual.getSnoozeEnabled()))
            .satisfies(e -> assertThat(e.getSnoozeDuration()).as("check snoozeDuration").isEqualTo(actual.getSnoozeDuration()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlarmUpdatableRelationshipsEquals(Alarm expected, Alarm actual) {
        assertThat(expected)
            .as("Verify Alarm relationships")
            .satisfies(e -> assertThat(e.getUserLogin()).as("check userLogin").isEqualTo(actual.getUserLogin()));
    }
}
